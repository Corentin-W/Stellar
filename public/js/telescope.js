/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/telescope.js":
/*!***********************************!*\
  !*** ./resources/js/telescope.js ***!
  \***********************************/
/***/ (() => {

eval("{function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// resources/js/telescope.js\n\n// ===========================\n// ALPINE.JS STORES\n// ===========================\n\n// Dark Mode Store\ndocument.addEventListener('alpine:init', function () {\n  Alpine.store('darkMode', {\n    isDark: localStorage.getItem('darkMode') === 'true' || !localStorage.getItem('darkMode') && window.matchMedia('(prefers-color-scheme: dark)').matches,\n    toggle: function toggle() {\n      this.isDark = !this.isDark;\n      localStorage.setItem('darkMode', this.isDark);\n      this.updateTheme();\n    },\n    init: function init() {\n      var _this = this;\n      this.updateTheme();\n      // Listen for system theme changes\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function (e) {\n        if (!localStorage.getItem('darkMode')) {\n          _this.isDark = e.matches;\n          _this.updateTheme();\n        }\n      });\n    },\n    updateTheme: function updateTheme() {\n      if (this.isDark) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    }\n  });\n\n  // Sidebar Store\n  Alpine.store('sidebar', {\n    isOpen: false,\n    toggle: function toggle() {\n      this.isOpen = !this.isOpen;\n    },\n    close: function close() {\n      this.isOpen = false;\n    },\n    open: function open() {\n      this.isOpen = true;\n    }\n  });\n\n  // Telescope Status Store\n  Alpine.store('telescope', {\n    status: 'offline',\n    isConnected: false,\n    currentSession: null,\n    weather: {\n      temperature: -2,\n      condition: 'Clear',\n      humidity: 45,\n      windSpeed: 5\n    },\n    connect: function connect() {\n      var _this2 = this;\n      this.status = 'connecting';\n      // Simulate connection delay\n      setTimeout(function () {\n        _this2.status = 'online';\n        _this2.isConnected = true;\n        _this2.checkTelescopeStatus();\n      }, 2000);\n    },\n    disconnect: function disconnect() {\n      this.status = 'offline';\n      this.isConnected = false;\n      this.currentSession = null;\n    },\n    checkTelescopeStatus: function checkTelescopeStatus() {\n      var _this3 = this;\n      if (this.isConnected) {\n        // Simulate periodic status check\n        setInterval(function () {\n          _this3.updateWeather();\n        }, 300000); // Update every 5 minutes\n      }\n    },\n    updateWeather: function updateWeather() {\n      // Simulate weather updates\n      this.weather.temperature = Math.floor(Math.random() * 20) - 10;\n      this.weather.humidity = Math.floor(Math.random() * 50) + 30;\n      this.weather.windSpeed = Math.floor(Math.random() * 15) + 1;\n    },\n    startSession: function startSession(sessionData) {\n      this.currentSession = {\n        id: sessionData.id,\n        startTime: new Date(),\n        duration: sessionData.duration,\n        target: sessionData.target\n      };\n    },\n    endSession: function endSession() {\n      this.currentSession = null;\n    }\n  });\n\n  // Notifications Store\n  Alpine.store('notifications', {\n    items: [{\n      id: 1,\n      title: 'Session completed',\n      message: 'Your imaging session of M31 has finished',\n      time: new Date(Date.now() - 2 * 60 * 1000),\n      read: false,\n      type: 'success'\n    }, {\n      id: 2,\n      title: 'Session reminder',\n      message: 'Your next session starts in 30 minutes',\n      time: new Date(Date.now() - 15 * 60 * 1000),\n      read: false,\n      type: 'info'\n    }, {\n      id: 3,\n      title: 'Weather alert',\n      message: 'Cloud coverage increasing, consider shorter exposures',\n      time: new Date(Date.now() - 45 * 60 * 1000),\n      read: true,\n      type: 'warning'\n    }],\n    get unreadCount() {\n      return this.items.filter(function (item) {\n        return !item.read;\n      }).length;\n    },\n    markAsRead: function markAsRead(id) {\n      var item = this.items.find(function (item) {\n        return item.id === id;\n      });\n      if (item) {\n        item.read = true;\n      }\n    },\n    markAllAsRead: function markAllAsRead() {\n      this.items.forEach(function (item) {\n        return item.read = true;\n      });\n    },\n    addNotification: function addNotification(notification) {\n      this.items.unshift(_objectSpread({\n        id: Date.now(),\n        time: new Date(),\n        read: false\n      }, notification));\n    },\n    removeNotification: function removeNotification(id) {\n      this.items = this.items.filter(function (item) {\n        return item.id !== id;\n      });\n    }\n  });\n});\n\n// ===========================\n// UTILITIES\n// ===========================\n\n// Format time utility\nfunction formatTime(seconds) {\n  var hours = Math.floor(seconds / 3600);\n  var minutes = Math.floor(seconds % 3600 / 60);\n  var secs = seconds % 60;\n  if (hours > 0) {\n    return \"\".concat(hours, \":\").concat(minutes.toString().padStart(2, '0'), \":\").concat(secs.toString().padStart(2, '0'));\n  }\n  return \"\".concat(minutes, \":\").concat(secs.toString().padStart(2, '0'));\n}\n\n// Format relative time\nfunction formatRelativeTime(date) {\n  var now = new Date();\n  var diff = now - date;\n  var minutes = Math.floor(diff / 60000);\n  var hours = Math.floor(diff / 3600000);\n  var days = Math.floor(diff / 86400000);\n  if (minutes < 1) return 'Just now';\n  if (minutes < 60) return \"\".concat(minutes, \" minute\").concat(minutes > 1 ? 's' : '', \" ago\");\n  if (hours < 24) return \"\".concat(hours, \" hour\").concat(hours > 1 ? 's' : '', \" ago\");\n  return \"\".concat(days, \" day\").concat(days > 1 ? 's' : '', \" ago\");\n}\n\n// Debounce function\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function executedFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(void 0, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(void 0, args);\n  };\n}\n\n// ===========================\n// TELESCOPE CONTROLS\n// ===========================\nvar TelescopeController = /*#__PURE__*/function () {\n  function TelescopeController() {\n    _classCallCheck(this, TelescopeController);\n    this.isConnected = false;\n    this.currentPosition = {\n      ra: 0,\n      dec: 0\n    };\n    this.isTracking = false;\n    this.isSlewing = false;\n  }\n  return _createClass(TelescopeController, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        var _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.p = _context.n) {\n            case 0:\n              _context.p = 0;\n              _context.n = 1;\n              return this.delay(2000);\n            case 1:\n              this.isConnected = true;\n              Alpine.store('telescope').connect();\n              this.showNotification('Connected to telescope', 'success');\n              return _context.a(2, true);\n            case 2:\n              _context.p = 2;\n              _t = _context.v;\n              this.showNotification('Failed to connect to telescope', 'error');\n              return _context.a(2, false);\n          }\n        }, _callee, this, [[0, 2]]);\n      }));\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              this.isConnected = false;\n              this.isTracking = false;\n              this.isSlewing = false;\n              Alpine.store('telescope').disconnect();\n              this.showNotification('Disconnected from telescope', 'info');\n            case 1:\n              return _context2.a(2);\n          }\n        }, _callee2, this);\n      }));\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"slewTo\",\n    value: function () {\n      var _slewTo = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(ra, dec) {\n        var _t2;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.p = _context3.n) {\n            case 0:\n              if (this.isConnected) {\n                _context3.n = 1;\n                break;\n              }\n              this.showNotification('Telescope not connected', 'error');\n              return _context3.a(2, false);\n            case 1:\n              _context3.p = 1;\n              this.isSlewing = true;\n              this.showNotification('Slewing to target...', 'info');\n\n              // Simulate slewing time\n              _context3.n = 2;\n              return this.delay(3000);\n            case 2:\n              this.currentPosition = {\n                ra: ra,\n                dec: dec\n              };\n              this.isSlewing = false;\n              this.showNotification('Slew completed', 'success');\n              return _context3.a(2, true);\n            case 3:\n              _context3.p = 3;\n              _t2 = _context3.v;\n              this.isSlewing = false;\n              this.showNotification('Slew failed', 'error');\n              return _context3.a(2, false);\n          }\n        }, _callee3, this, [[1, 3]]);\n      }));\n      function slewTo(_x, _x2) {\n        return _slewTo.apply(this, arguments);\n      }\n      return slewTo;\n    }()\n  }, {\n    key: \"toggleTracking\",\n    value: function toggleTracking() {\n      if (!this.isConnected) {\n        this.showNotification('Telescope not connected', 'error');\n        return;\n      }\n      this.isTracking = !this.isTracking;\n      this.showNotification(this.isTracking ? 'Tracking enabled' : 'Tracking disabled', 'info');\n    }\n  }, {\n    key: \"takeImage\",\n    value: function () {\n      var _takeImage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(exposure) {\n        var filter,\n          imageId,\n          _args4 = arguments,\n          _t3;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.p = _context4.n) {\n            case 0:\n              filter = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 'Luminance';\n              if (this.isConnected) {\n                _context4.n = 1;\n                break;\n              }\n              this.showNotification('Telescope not connected', 'error');\n              return _context4.a(2, false);\n            case 1:\n              _context4.p = 1;\n              this.showNotification(\"Starting \".concat(exposure, \"s exposure with \").concat(filter, \" filter\"), 'info');\n\n              // Simulate exposure time\n              _context4.n = 2;\n              return this.delay(exposure * 1000);\n            case 2:\n              imageId = Date.now();\n              this.showNotification('Image captured successfully', 'success');\n\n              // Add to gallery (simulate)\n              this.addToGallery(imageId, filter, exposure);\n              return _context4.a(2, imageId);\n            case 3:\n              _context4.p = 3;\n              _t3 = _context4.v;\n              this.showNotification('Image capture failed', 'error');\n              return _context4.a(2, false);\n          }\n        }, _callee4, this, [[1, 3]]);\n      }));\n      function takeImage(_x3) {\n        return _takeImage.apply(this, arguments);\n      }\n      return takeImage;\n    }() // Helper methods\n  }, {\n    key: \"delay\",\n    value: function delay(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }, {\n    key: \"showNotification\",\n    value: function showNotification(message, type) {\n      Alpine.store('notifications').addNotification({\n        title: 'Telescope',\n        message: message,\n        type: type\n      });\n    }\n  }, {\n    key: \"addToGallery\",\n    value: function addToGallery(imageId, filter, exposure) {\n      // This would typically send to your backend\n      console.log(\"Image \".concat(imageId, \" added to gallery: \").concat(filter, \" filter, \").concat(exposure, \"s exposure\"));\n    }\n  }]);\n}(); // Global telescope controller instance\nwindow.telescopeController = new TelescopeController();\n\n// ===========================\n// SESSION MANAGEMENT\n// ===========================\nvar SessionManager = /*#__PURE__*/function () {\n  function SessionManager() {\n    _classCallCheck(this, SessionManager);\n    this.activeSessions = [];\n    this.upcomingSessions = [];\n  }\n  return _createClass(SessionManager, [{\n    key: \"bookSession\",\n    value: function () {\n      var _bookSession = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(sessionData) {\n        var session, _t4;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.p = _context5.n) {\n            case 0:\n              _context5.p = 0;\n              _context5.n = 1;\n              return this.delay(1000);\n            case 1:\n              session = _objectSpread(_objectSpread({\n                id: Date.now()\n              }, sessionData), {}, {\n                status: 'scheduled',\n                createdAt: new Date()\n              });\n              this.upcomingSessions.push(session);\n              Alpine.store('notifications').addNotification({\n                title: 'Session booked',\n                message: \"Session for \".concat(sessionData.target, \" scheduled for \").concat(this.formatDate(sessionData.startTime)),\n                type: 'success'\n              });\n              return _context5.a(2, session);\n            case 2:\n              _context5.p = 2;\n              _t4 = _context5.v;\n              Alpine.store('notifications').addNotification({\n                title: 'Booking failed',\n                message: 'Failed to book session. Please try again.',\n                type: 'error'\n              });\n              throw _t4;\n            case 3:\n              return _context5.a(2);\n          }\n        }, _callee5, this, [[0, 2]]);\n      }));\n      function bookSession(_x4) {\n        return _bookSession.apply(this, arguments);\n      }\n      return bookSession;\n    }()\n  }, {\n    key: \"startSession\",\n    value: function () {\n      var _startSession = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(sessionId) {\n        var session;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              session = this.upcomingSessions.find(function (s) {\n                return s.id === sessionId;\n              });\n              if (session) {\n                _context6.n = 1;\n                break;\n              }\n              throw new Error('Session not found');\n            case 1:\n              session.status = 'active';\n              session.startedAt = new Date();\n              this.activeSessions.push(session);\n              this.upcomingSessions = this.upcomingSessions.filter(function (s) {\n                return s.id !== sessionId;\n              });\n              Alpine.store('telescope').startSession(session);\n              Alpine.store('notifications').addNotification({\n                title: 'Session started',\n                message: \"Imaging session for \".concat(session.target, \" has begun\"),\n                type: 'success'\n              });\n            case 2:\n              return _context6.a(2);\n          }\n        }, _callee6, this);\n      }));\n      function startSession(_x5) {\n        return _startSession.apply(this, arguments);\n      }\n      return startSession;\n    }()\n  }, {\n    key: \"endSession\",\n    value: function () {\n      var _endSession = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(sessionId) {\n        var session;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              session = this.activeSessions.find(function (s) {\n                return s.id === sessionId;\n              });\n              if (session) {\n                _context7.n = 1;\n                break;\n              }\n              throw new Error('Session not found');\n            case 1:\n              session.status = 'completed';\n              session.endedAt = new Date();\n              this.activeSessions = this.activeSessions.filter(function (s) {\n                return s.id !== sessionId;\n              });\n              Alpine.store('telescope').endSession();\n              Alpine.store('notifications').addNotification({\n                title: 'Session completed',\n                message: \"Imaging session for \".concat(session.target, \" has finished\"),\n                type: 'success'\n              });\n            case 2:\n              return _context7.a(2);\n          }\n        }, _callee7, this);\n      }));\n      function endSession(_x6) {\n        return _endSession.apply(this, arguments);\n      }\n      return endSession;\n    }()\n  }, {\n    key: \"getUpcomingSessions\",\n    value: function getUpcomingSessions() {\n      return this.upcomingSessions.sort(function (a, b) {\n        return a.startTime - b.startTime;\n      });\n    }\n  }, {\n    key: \"getActiveSessions\",\n    value: function getActiveSessions() {\n      return this.activeSessions;\n    }\n\n    // Helper methods\n  }, {\n    key: \"delay\",\n    value: function delay(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(date) {\n      return new Intl.DateTimeFormat('en-US', {\n        weekday: 'short',\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      }).format(date);\n    }\n  }]);\n}(); // Global session manager instance\nwindow.sessionManager = new SessionManager();\n\n// ===========================\n// INITIALIZATION\n// ===========================\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Initialize dark mode\n  Alpine.store('darkMode').init();\n\n  // Initialize telescope status check\n  Alpine.store('telescope').checkTelescopeStatus();\n\n  // Add keyboard shortcuts\n  document.addEventListener('keydown', function (e) {\n    // Ctrl/Cmd + K for search\n    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n      e.preventDefault();\n      var searchInput = document.querySelector('.search-input');\n      if (searchInput) {\n        searchInput.focus();\n      }\n    }\n\n    // Ctrl/Cmd + D for dark mode toggle\n    if ((e.ctrlKey || e.metaKey) && e.key === 'd') {\n      e.preventDefault();\n      Alpine.store('darkMode').toggle();\n    }\n\n    // Escape to close modals/dropdowns\n    if (e.key === 'Escape') {\n      Alpine.store('sidebar').close();\n    }\n  });\n\n  // Handle responsive sidebar\n  var mediaQuery = window.matchMedia('(max-width: 1024px)');\n  function handleResponsiveChange(e) {\n    if (!e.matches) {\n      Alpine.store('sidebar').close();\n    }\n  }\n  mediaQuery.addListener(handleResponsiveChange);\n  handleResponsiveChange(mediaQuery);\n\n  // Auto-save form data\n  var autoSaveForms = document.querySelectorAll('[data-auto-save]');\n  autoSaveForms.forEach(function (form) {\n    var formInputs = form.querySelectorAll('input, textarea, select');\n    var debouncedSave = debounce(function () {\n      var formData = new FormData(form);\n      var data = Object.fromEntries(formData.entries());\n      localStorage.setItem(\"autosave_\".concat(form.dataset.autoSave), JSON.stringify(data));\n    }, 1000);\n    formInputs.forEach(function (input) {\n      input.addEventListener('input', debouncedSave);\n    });\n\n    // Restore saved data\n    var savedData = localStorage.getItem(\"autosave_\".concat(form.dataset.autoSave));\n    if (savedData) {\n      try {\n        var data = JSON.parse(savedData);\n        Object.entries(data).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            value = _ref2[1];\n          var input = form.querySelector(\"[name=\\\"\".concat(name, \"\\\"]\"));\n          if (input) {\n            input.value = value;\n          }\n        });\n      } catch (e) {\n        console.error('Failed to restore form data:', e);\n      }\n    }\n  });\n  console.log('Telescope App initialized successfully');\n});\n\n// ===========================\n// EXPORT FOR GLOBAL ACCESS\n// ===========================\n\nwindow.TelescopeApp = {\n  formatTime: formatTime,\n  formatRelativeTime: formatRelativeTime,\n  debounce: debounce,\n  TelescopeController: TelescopeController,\n  SessionManager: SessionManager\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/telescope.js\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/telescope.js"]();
/******/ 	
/******/ })()
;